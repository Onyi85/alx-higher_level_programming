# 0-add_integer.txt

How to use 0-add_integer.py

This function only adds and returns two integers``add_integer(a, b=98)

Usage:
	To learn how this function works, we have got to test it.
	Example: if you pass in two ints, it would just add and return them
		if you pass in one int and one float, it would convert the 
		float to an int and adds and returns then.
		if you pass in two float numbers, then we would convert to int
		before actually adding them.
		if you pass in an int and a string, it would throw a TypeError.
		if you pass in two strings, then it would throw a TypeError.
		if you pass in a None value for a, then it would throw a TypeError.

		if you pass in two None values, then it would throw a TypeError

		if you pass in a None value and a string, then it would throw a TypeError.
Shell commands to test our function:
	invoking and calling the function

>>> add_integer = __import__('0-add_integer').add_integer

	.: importing the module
Now calling the function:


if you pass in two ints, it will just add and return
>>> add_integer(1, 2)
3



if you pass in two ints, it would just add and return
>>> add_integer(100, -2)
98



if you pass in only value for a, then that value will be added to 98
>>> add_integer(2)
100


TESTING FOR NON-NUMBERS:

if you pass in a string, then it would throw a TypeError.

>>> add_integer(4, "School")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 13, in add_integer
    raise TypeError("b must be an integer")
TypeError: b must be an integer



if you pass in a float infinity, then it would throw a overflowerror

>>> add_integer(float('inf'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 15, in add_integer
    a = int(a)
OverflowError: cannot convert float infinity to integer
